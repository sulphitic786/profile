{"version":3,"file":"static/js/997.71835ba6.chunk.js","mappings":"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","sources":["app/views/todo/TagDialog.jsx","app/views/todo/TodoEditor.jsx","app/views/todo/TodoService.js","../node_modules/@mui/material/utils/useId.js"],"sourcesContent":["import { Box, Button, Dialog, TextField, useTheme } from \"@mui/material\";\r\nimport { FlexBetween, FlexBox } from \"app/components/FlexBox\";\r\nimport { Span } from \"app/components/Typography\";\r\nimport { generateRandomId } from \"app/utils/utils\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { addNewTag, deleteTag, getAllTodoTag } from \"./TodoService\";\r\n\r\nconst TagDialog = ({ open, handleClose }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [tagList, setTagList] = useState([]);\r\n  const [isAlive, setIsAlive] = useState(true);\r\n\r\n  const loadTagList = useCallback(async () => {\r\n    let { data } = await getAllTodoTag();\r\n    if (isAlive) setTagList(data);\r\n  }, [isAlive]);\r\n\r\n  useEffect(() => {\r\n    loadTagList();\r\n    return () => setIsAlive(false);\r\n  }, [loadTagList]);\r\n\r\n  useEffect(() => {\r\n    return () => setIsAlive(false);\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleAddNewTag();\r\n    } else {\r\n      setName(event.target.value);\r\n    }\r\n  };\r\n\r\n  const handleAddNewTag = async (event) => {\r\n    if (name.trim() !== \"\") {\r\n      let { data: tag } = await addNewTag({\r\n        id: generateRandomId(),\r\n        name: name.trim(),\r\n      });\r\n\r\n      if (isAlive) {\r\n        let list = [...tagList];\r\n        list.push(tag);\r\n\r\n        setTagList(list);\r\n        setName(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteTag = async (id) => {\r\n    await deleteTag({ id, name });\r\n    if (isAlive) {\r\n      let list = tagList.filter((tag) => tag.id !== id);\r\n      setTagList([...list]);\r\n    }\r\n  };\r\n\r\n  const { palette } = useTheme();\r\n  const bgError = palette.error.main;\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open} maxWidth=\"xs\">\r\n      <Box px={2} py={3}>\r\n        <FlexBox alignItems=\"center\">\r\n          <TextField\r\n            value={name}\r\n            size=\"small\"\r\n            label=\"New tag*\"\r\n            variant=\"outlined\"\r\n            onChange={handleChange}\r\n            onKeyDown={handleChange}\r\n            sx={{ flexGrow: 1 }}\r\n          />\r\n          <div>\r\n            <Button onClick={handleAddNewTag} variant=\"contained\" color=\"primary\">\r\n              Add\r\n            </Button>\r\n          </div>\r\n        </FlexBox>\r\n\r\n        <Box pt={2}>\r\n          {tagList.map((tag, index) => (\r\n            <FlexBetween my={1} key={tag.id}>\r\n              <span>{index + 1}</span>\r\n              <Span sx={{ textTransform: \"capitalize\" }}>{tag.name}</Span>\r\n              <Button\r\n                onClickCapture={() => handleDeleteTag(tag.id)}\r\n                variant=\"contained\"\r\n                sx={{ background: bgError }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </FlexBetween>\r\n          ))}\r\n        </Box>\r\n\r\n        <Box pt={2} textAlign=\"right\">\r\n          <Button onClick={handleClose} variant=\"outlined\" color=\"secondary\">\r\n            Close\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default TagDialog;\r\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  Hidden,\n  Icon,\n  IconButton,\n  MenuItem,\n  styled,\n  TextField,\n  Tooltip\n} from '@mui/material';\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { MatxMenu } from 'app/components';\nimport { themeShadows } from 'app/components/MatxTheme/themeColors';\nimport { Component } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport TagDialog from './TagDialog';\nimport { addTodo, deleteTodo, getAllTodoTag, getTodoById, updateTodoById } from './TodoService';\n\nconst Container = styled('div')(({ theme }) => ({\n  margin: '30px',\n  zIndex: 2000,\n  background: '#fff',\n  borderRadius: '4px',\n  boxShadow: themeShadows[5],\n  [theme.breakpoints.down('sm')]: { margin: '16px' }\n}));\n\nconst FlexBox = styled(Box)({\n  display: 'flex',\n  flexWrap: 'wrap',\n  alignItems: 'center'\n});\n\nconst JustifyBox = styled(FlexBox)({\n  paddingTop: '8px',\n  paddingBottom: '8px',\n  justifyContent: 'space-between',\n  background: 'rgba(0, 0, 0, 0.01)'\n});\n\nconst withRouter = (WrappedComponent) => (props) => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  return <WrappedComponent {...props} params={params} navigate={navigate} />;\n};\n\nclass TodoEditor extends Component {\n  state = {\n    todo: {\n      title: '',\n      note: '',\n      done: false,\n      read: false,\n      starred: false,\n      important: false,\n      startDate: new Date(),\n      dueDate: new Date(),\n      tag: []\n    },\n    tagList: [],\n    shouldOpenTagDialog: false\n  };\n\n  componentDidMount() {\n    let { id } = this.props.params;\n\n    getAllTodoTag().then(({ data: tagList }) => {\n      if (id !== 'add') {\n        getTodoById(id).then(({ data }) => {\n          if (!data) {\n            this.props.navigate('/todo/list');\n            return;\n          }\n          this.setState({ todo: { ...data }, tagList: [...tagList] });\n        });\n      } else {\n        this.setState({ tagList });\n      }\n    });\n  }\n\n  addNewTodo = () => {\n    let id = this.state.tagList.length + 1;\n    addTodo({ ...this.state.todo, id }).then(() => {\n      this.props.navigate('/todo/list');\n    });\n  };\n\n  updateTodo = (todo) => {\n    updateTodoById(todo);\n    this.setState({\n      todo: { ...this.state.todo, ...todo }\n    });\n  };\n\n  reloadTagList = () => {\n    getAllTodoTag().then(({ data }) => {\n      this.setState({ tagList: [...data] });\n    });\n  };\n\n  addTagInTodo = (id) => {\n    let { tag } = this.state.todo;\n    if (!tag.includes(id)) {\n      tag.push(id);\n      this.setState({\n        todo: { ...this.state.todo, tag }\n      });\n    }\n  };\n\n  handleTagDelete = (tagId) => {\n    let { tag: tagList = [] } = this.state.todo;\n    tagList = tagList.filter((id) => id !== tagId);\n    this.setState(\n      {\n        todo: { ...this.state.todo, tag: [...tagList] }\n      },\n      () => updateTodoById({ ...this.state.todo })\n    );\n  };\n\n  handleTodoDelete = () => {\n    deleteTodo({ ...this.state.todo }).then(() => {\n      this.props.navigate('/todo/list');\n    });\n  };\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({\n      todo: {\n        ...this.state.todo,\n        [event.target.name]: event.target.value\n      }\n    });\n  };\n\n  handleDateChange = (filedName, date) => {\n    this.setState(\n      this.setState({\n        todo: {\n          ...this.state.todo,\n          [filedName]: date\n        }\n      })\n    );\n  };\n\n  handleSubmit = (event) => {\n    let { id: todoId } = this.props.params;\n\n    if (todoId === 'add') {\n      this.addNewTodo();\n    } else {\n      updateTodoById({ ...this.state.todo }).then(() => {\n        this.props.navigate('/todo/list');\n      });\n    }\n  };\n\n  handleTagDialogToggle = () => {\n    this.setState({\n      shouldOpenTagDialog: !this.state.shouldOpenTagDialog\n    });\n  };\n\n  render() {\n    let {\n      title,\n      note,\n      done,\n      read,\n      starred,\n      important,\n      startDate,\n      dueDate,\n      tag: tagIdList = []\n    } = this.state.todo;\n    let { tagList } = this.state;\n\n    return (\n      <Container>\n        <JustifyBox>\n          <FlexBox>\n            <Link to=\"/todo/list\">\n              <IconButton>\n                <Icon>arrow_back</Icon>\n              </IconButton>\n            </Link>\n\n            <Hidden smDown>\n              <FormControlLabel\n                sx={{ ml: 1 }}\n                onChange={() => this.updateTodo({ ...this.state, done: !done })}\n                control={<Checkbox checked={done} />}\n                label={`Mark As ${done ? 'Und' : 'D'}one`}\n              />\n            </Hidden>\n          </FlexBox>\n\n          <Box display=\"flex\" flexWrap=\"wrap\">\n            <Tooltip title={`Mark As ${read ? 'Unr' : 'R'}ead`} fontSize=\"large\">\n              <IconButton onClick={() => this.updateTodo({ ...this.state, read: !read })}>\n                <Icon>{read ? 'drafts' : 'markunread'}</Icon>\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title={`Mark As ${important ? 'Uni' : 'I'}mportant`} fontSize=\"large\">\n              <IconButton onClick={() => this.updateTodo({ ...this.state, important: !important })}>\n                <Icon color={important ? 'error' : 'inherit'}>\n                  {important ? 'error' : 'error_outline'}\n                </Icon>\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title={`Mark As ${starred ? 'Uns' : 'S'}tarred`} fontSize=\"large\">\n              <IconButton onClick={() => this.updateTodo({ ...this.state, starred: !starred })}>\n                <Icon color={starred ? 'secondary' : 'inherit'}>\n                  {starred ? 'star' : 'star_outline'}\n                </Icon>\n              </IconButton>\n            </Tooltip>\n\n            <Hidden smDown>\n              <Tooltip title=\"Manage tags\" fontSize=\"large\">\n                <IconButton onClick={this.handleTagDialogToggle}>\n                  <Icon>library_add</Icon>\n                </IconButton>\n              </Tooltip>\n            </Hidden>\n\n            <MatxMenu\n              menuButton={\n                <Tooltip title=\"Add tags\" fontSize=\"large\">\n                  <IconButton>\n                    <Icon>label</Icon>\n                  </IconButton>\n                </Tooltip>\n              }\n            >\n              {this.state.tagList.map((tag) => (\n                <MenuItem\n                  key={tag.id}\n                  sx={{ textTransform: 'capitalize' }}\n                  onClick={() => this.addTagInTodo(tag.id)}\n                >\n                  {tag.name}\n                </MenuItem>\n              ))}\n            </MatxMenu>\n\n            <Tooltip title=\"Delete\" fontSize=\"large\">\n              <IconButton onClick={this.handleTodoDelete}>\n                <Icon>delete_outline</Icon>\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </JustifyBox>\n\n        <Box p={2}>\n          {tagIdList.length ? (\n            <Box mb={2}>\n              {tagIdList.map((tagId) => {\n                let tagName = (tagList.find((tag) => tag.id === tagId) || {}).name;\n                if (!tagName) return null;\n                else\n                  return (\n                    <Chip\n                      key={tagId}\n                      label={tagName}\n                      onDelete={() => this.handleTagDelete(tagId)}\n                      sx={{ mr: 1, textTransform: 'capitalize' }}\n                    />\n                  );\n              })}\n            </Box>\n          ) : null}\n\n          <form onSubmit={this.handleSubmit}>\n            <TextField\n              fullWidth\n              type=\"text\"\n              name=\"title\"\n              value={title}\n              label=\"Title*\"\n              onChange={this.handleChange}\n              sx={{ mb: 2 }}\n            />\n\n            <TextField\n              fullWidth\n              type=\"text\"\n              name=\"note\"\n              value={note}\n              multiline={true}\n              label=\"Put your notes*\"\n              onChange={this.handleChange}\n              sx={{ mb: 2 }}\n            />\n\n            <Box mb={2}>\n              <Grid container spacing={2}>\n                <Grid item lg={6} md={6} sm={12} xs={12}>\n                  {/* <DatePicker\n                    value={new Date(startDate)}\n                    onChange={(date) => this.handleDateChange(\"startDate\", date)}\n                    renderInput={(props) => (\n                      <TextField\n                        {...props}\n                        fullWidth\n                        variant=\"standard\"\n                        id=\"mui-pickers-date\"\n                        label=\"Start Date*\"\n                      />\n                    )}\n                  /> */}\n                </Grid>\n\n                <Grid item lg={6} md={6} sm={12} xs={12}>\n                  {/* <DatePicker\n                    value={new Date(dueDate)}\n                    onChange={(date) => this.handleDateChange('dueDate', date)}\n                    renderInput={(props) => (\n                      <TextField\n                        {...props}\n                        fullWidth\n                        variant=\"standard\"\n                        id=\"mui-pickers-date\"\n                        label=\"End Date*\"\n                      />\n                    )}\n                  /> */}\n                </Grid>\n              </Grid>\n            </Box>\n\n            <Link to=\"/todo/list\">\n              <Button variant=\"outlined\" color=\"secondary\" sx={{ mr: 2 }} type=\"submit\">\n                cancel\n              </Button>\n            </Link>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              save\n            </Button>\n          </form>\n        </Box>\n\n        <TagDialog\n          reloadTagList={this.reloadTagList}\n          open={this.state.shouldOpenTagDialog}\n          handleClose={this.handleTagDialogToggle}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(TodoEditor);\n","import axios from \"axios\";\n\nexport const getAllTodo = () => {\n  return axios.get(\"/api/todo/all\");\n};\n\nexport const getTodoById = (todoId) => {\n  return axios.get(\"/api/todo\", { data: todoId });\n};\n\nexport const reorderTodoList = (todoList) => {\n  return axios.post(\"/api/todo/reorder\", { todoList });\n};\n\nexport const addTodo = (todo) => {\n  return axios.post(\"/api/todo/add\", { todo });\n};\n\nexport const updateTodoById = (todo) => {\n  return axios.post(\"/api/todo/update\", { todo });\n};\n\nexport const deleteTodo = (todo) => {\n  return axios.post(\"/api/todo/delete\", { todo });\n};\n\n// tag management\nexport const getAllTodoTag = () => {\n  return axios.get(\"/api/todo/tag\");\n};\n\nexport const addNewTag = (tag) => {\n  return axios.post(\"/api/todo/tag/add\", { tag });\n};\n\nexport const deleteTag = (tag) => {\n  return axios.post(\"/api/todo/tag/delete\", { tag });\n};\n","'use client';\n\nimport { unstable_useId as useId } from '@mui/utils';\nexport default useId;"],"names":["_ref","open","handleClose","name","setName","useState","tagList","setTagList","isAlive","setIsAlive","loadTagList","useCallback","async","data","getAllTodoTag","useEffect","handleChange","event","key","handleAddNewTag","target","value","trim","tag","addNewTag","id","generateRandomId","list","push","palette","useTheme","bgError","error","main","_jsx","Dialog","onClose","maxWidth","children","_jsxs","Box","px","py","FlexBox","alignItems","TextField","size","label","variant","onChange","onKeyDown","sx","flexGrow","Button","onClick","color","pt","map","index","FlexBetween","my","Span","textTransform","onClickCapture","deleteTag","filter","handleDeleteTag","background","textAlign","Container","styled","theme","margin","zIndex","borderRadius","boxShadow","themeShadows","breakpoints","down","display","flexWrap","JustifyBox","paddingTop","paddingBottom","justifyContent","TodoEditor","Component","constructor","arguments","state","todo","title","note","done","read","starred","important","startDate","Date","dueDate","shouldOpenTagDialog","addNewTodo","this","length","addTodo","then","props","navigate","updateTodo","updateTodoById","setState","reloadTagList","_ref2","addTagInTodo","includes","handleTagDelete","tagId","handleTodoDelete","deleteTodo","persist","handleDateChange","filedName","date","handleSubmit","todoId","params","handleTagDialogToggle","componentDidMount","_ref3","getTodoById","_ref4","render","tagIdList","Link","to","IconButton","Icon","Hidden","smDown","FormControlLabel","ml","control","Checkbox","checked","concat","Tooltip","fontSize","MatxMenu","menuButton","MenuItem","p","mb","tagName","find","Chip","onDelete","mr","onSubmit","fullWidth","type","multiline","Grid","container","spacing","item","lg","md","sm","xs","TagDialog","WrappedComponent","useParams","useNavigate","getAllTodo","axios","get","reorderTodoList","todoList","post"],"sourceRoot":""}