{"version":3,"file":"static/js/664.9d99dee3.chunk.js","mappings":"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","sources":["app/views/sessions/JwtLogin.jsx"],"sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled, useTheme } from '@mui/material';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(Box)(() => ({\n  height: '100%',\n  padding: '32px',\n  position: 'relative',\n  background: 'rgba(0, 0, 0, 0.01)'\n}));\n\nconst JWTRoot = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100% !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center'\n  }\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: 'jason@ui-lib.com',\n  password: 'dummyPass',\n  remember: true\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!')\n});\n\nconst JwtLogin = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const { login } = useAuth();\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n    try {\n      await login(values.email, values.password);\n      navigate('/');\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRoot>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <JustifyBox p={4} height=\"100%\" sx={{ minWidth: 320 }}>\n              <img src=\"/assets/images/illustrations/dreamer.svg\" width=\"100%\" alt=\"\" />\n            </JustifyBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 1.5 }}\n                    />\n\n                    <FlexBox justifyContent=\"space-between\">\n                      <FlexBox gap={1}>\n                        <Checkbox\n                          size=\"small\"\n                          name=\"remember\"\n                          onChange={handleChange}\n                          checked={values.remember}\n                          sx={{ padding: 0 }}\n                        />\n\n                        <Paragraph>Remember Me</Paragraph>\n                      </FlexBox>\n\n                      <NavLink\n                        to=\"/session/forgot-password\"\n                        style={{ color: theme.palette.primary.main }}\n                      >\n                        Forgot password?\n                      </NavLink>\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ my: 2 }}\n                    >\n                      Login\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Don't have an account?\n                      <NavLink\n                        to=\"/session/signup\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Register\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </ContentBox>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRoot>\n  );\n};\n\nexport default JwtLogin;\n"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","JWTRoot","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","remember","validationSchema","Yup","shape","min","required","theme","useTheme","navigate","useNavigate","useState","loading","setLoading","login","useAuth","handleFormSubmit","values","className","container","item","sm","xs","p","sx","minWidth","src","width","alt","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","mb","gap","checked","to","style","color","palette","primary","main","my","marginLeft"],"sourceRoot":""}