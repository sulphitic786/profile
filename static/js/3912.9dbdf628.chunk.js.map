{"version":3,"file":"static/js/3912.9dbdf628.chunk.js","mappings":"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","sources":["app/views/pages/management/projects/ProjectForm.jsx"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Divider,\r\n  Grid,\r\n  Icon,\r\n  MenuItem,\r\n  styled,\r\n  TextField,\r\n  Stack\r\n} from '@mui/material';\r\nimport { Breadcrumb } from 'app/components';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { collection, addDoc, doc, updateDoc } from 'firebase/firestore';\r\nimport { fireStore } from 'config';\r\nimport { FlexAlignCenter, FlexBox } from 'app/components/FlexBox';\r\nimport { H4 } from 'app/components/Typography';\r\nimport { convertHexToRGB, removeTimeFromDate, getIsoDate } from 'app/utils/utils';\r\nimport { Formik } from 'formik';\r\nimport { useAlert } from 'app/contexts/AlertContext';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport Flatpickr from 'react-flatpickr';\r\nimport 'flatpickr/dist/themes/material_green.css';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { MatxLoading } from 'app/components';\r\n\r\n// styled components\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n  [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n  '& .breadcrumb': {\r\n    marginBottom: '30px',\r\n    [theme.breakpoints.down('sm')]: { marginBottom: '16px' }\r\n  }\r\n}));\r\n\r\nconst StyledTextField = styled(TextField)({ marginBottom: '16px' });\r\nconst Form = styled('form')({ paddingLeft: '16px', paddingRight: '16px' });\r\n\r\nconst DropZone = styled(FlexAlignCenter)(({ isDragActive, theme }) => ({\r\n  height: 160,\r\n  width: '100%',\r\n  cursor: 'pointer',\r\n  borderRadius: '4px',\r\n  marginBottom: '16px',\r\n  transition: 'all 350ms ease-in-out',\r\n  border: `2px dashed rgba(${convertHexToRGB(theme.palette.text.primary)}, 0.3)`,\r\n  '&:hover': {\r\n    background: `rgb(${convertHexToRGB(theme.palette.text.primary)}, 0.2) !important`\r\n  },\r\n  background: isDragActive ? 'rgb(0, 0, 0, 0.15)' : 'rgb(0, 0, 0, 0.01)'\r\n}));\r\n\r\nconst ProjectForm = (props) => {\r\n  const [imageList, setImageList] = useState([]);\r\n  const [dateRange, setDateRange] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { getRootProps, getInputProps, acceptedFiles } = useDropzone({\r\n    accept: { 'image/*': ['.jpg', '.png'] }\r\n  });\r\n  const { showAlert } = useAlert();\r\n  const storage = getStorage(); // Initialize Firebase Storage\r\n  let formData = props?.updateData;\r\n\r\n  const productSchema = yup.object().shape({\r\n    name: yup.string().required('Name is required!'),\r\n    technology: yup.string().required('Technology (Like -> Html, Css) is required!'),\r\n    category: yup.string().required('Category is required!'),\r\n    status: yup.string().required('Status is required!'),\r\n    description: yup.string().required('Description is required!')\r\n  });\r\n\r\n  let initialValues = {\r\n    name: formData?.name || '',\r\n    live_url: formData?.live_url || '',\r\n    client: formData?.client || '',\r\n    client_region: formData?.client_region || '',\r\n    client_email: formData?.client_email || '',\r\n    client_phone: formData?.client_phone || '',\r\n    description: formData?.description || '',\r\n    category: formData?.category || '',\r\n    status: formData?.status || '',\r\n    technology: formData?.technology || '',\r\n    images: formData?.images || [],\r\n    project_duration: formData?.project_duration || [],\r\n    description: formData?.description || '',\r\n    created_at: formData?.created_at || getIsoDate(),\r\n    updated_at: getIsoDate()\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formData?.project_duration) {\r\n      setDateRange(formData?.project_duration);\r\n    }\r\n  }, [formData]);\r\n\r\n  useEffect(() => {\r\n    setImageList(acceptedFiles);\r\n  }, [acceptedFiles]);\r\n\r\n  const handleSubmit = async (values) => {\r\n    values.project_duration = dateRange;\r\n    if (props?.action == 'update') {\r\n      updateProject(values);\r\n    } else {\r\n      addProject(values);\r\n    }\r\n  };\r\n  const addProject = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const downloadURLs = []; // Array to store download URLs of uploaded images\r\n      await Promise.all(\r\n        acceptedFiles.map(async (file) => {\r\n          const storageRef = ref(storage, 'project-files/' + file.name);\r\n          await uploadBytes(storageRef, file);\r\n          const downloadURL = await getDownloadURL(storageRef); // Get download URL for the uploaded image and add it to the array\r\n          downloadURLs.push(downloadURL);\r\n        })\r\n      );\r\n\r\n      // Store image URLs and additional data in Firestore\r\n      const preparedData = { ...values, images: downloadURLs };\r\n      await addDoc(collection(fireStore, 'projects'), preparedData);\r\n      showAlert('success', 'Project data added successfully!');\r\n      setLoading(false);\r\n      props.fetchData();\r\n      props.back();\r\n    } catch (error) {\r\n      setLoading(false);\r\n      showAlert('error', 'Error while adding project data!');\r\n      console.error('Error uploading images:', error);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const downloadURLs = []; // Array to store download URLs of uploaded images\r\n      // Upload images if new images are selected\r\n      if (acceptedFiles?.length) {\r\n        await Promise.all(\r\n          acceptedFiles.map(async (file) => {\r\n            const storageRef = ref(storage, 'project-files/' + file.name);\r\n            await uploadBytes(storageRef, file);\r\n            const downloadURL = await getDownloadURL(storageRef); // Get download URL for the uploaded image and add it to the array\r\n            downloadURLs.push(downloadURL);\r\n          })\r\n        );\r\n      }\r\n\r\n      // Update document in Firestore\r\n      const projectRef = doc(fireStore, 'projects', formData.id); // Assuming you have the ID of the project to update\r\n      await updateDoc(projectRef, {\r\n        ...values, // Update existing values\r\n        images: downloadURLs.length ? downloadURLs : values.images // If new images are uploaded, update images with new URLs, otherwise keep existing images\r\n      });\r\n      setLoading(false);\r\n      showAlert('success', 'Project data updated successfully!');\r\n      props.fetchData();\r\n      props.back();\r\n    } catch (error) {\r\n      setLoading(false);\r\n      showAlert('error', 'Error while updating project data!');\r\n      console.error('Error uploading images:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {loading && <MatxLoading />}\r\n      <Card elevation={3}>\r\n        <Box p={2} display=\"flex\">\r\n          <H4>{props?.action == 'update' ? 'Update Project' : 'Add New Project'}</H4>\r\n        </Box>\r\n        <Divider sx={{ mb: 3 }} />\r\n\r\n        <Formik\r\n          onSubmit={handleSubmit}\r\n          // enableReinitialize={true}\r\n          initialValues={initialValues}\r\n          validationSchema={productSchema}\r\n        >\r\n          {({ values, errors, touched, resetForm, handleChange, handleBlur, handleSubmit }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Grid container spacing={3}>\r\n                <Grid item sm={6} xs={12}>\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    name=\"name\"\r\n                    label=\"Name *\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.name || ''}\r\n                    error={Boolean(touched.name && errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    name=\"live_url\"\r\n                    variant=\"outlined\"\r\n                    label=\"Live Url\"\r\n                    onChange={handleChange}\r\n                    value={values.live_url || ''}\r\n                  />\r\n\r\n                  <Flatpickr\r\n                    options={{ mode: 'range' }}\r\n                    className=\"form-control mb-3\"\r\n                    name=\"project_duration\"\r\n                    placeholder=\"Project Duration\"\r\n                    value={dateRange}\r\n                    onChange={(selectedDates) => {\r\n                      const startDate = selectedDates[0]?.toISOString();\r\n                      const endDate = selectedDates[1]?.toISOString();\r\n                      setDateRange([startDate, endDate]);\r\n                    }}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    select\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    name=\"status\"\r\n                    label=\"Status *\"\r\n                    variant=\"outlined\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.status || ''}\r\n                    error={Boolean(touched.status && errors.status)}\r\n                    helperText={touched.status && errors.status}\r\n                  >\r\n                    {statusList.sort().map((cat) => (\r\n                      <MenuItem value={cat} key={cat}>\r\n                        {cat}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </StyledTextField>\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    rows={2}\r\n                    multiline\r\n                    size=\"small\"\r\n                    name=\"technology\"\r\n                    variant=\"outlined\"\r\n                    label=\"Technology or Language *\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.technology || ''}\r\n                    error={Boolean(touched.technology && errors.technology)}\r\n                    helperText={touched.technology && errors.technology}\r\n                  />\r\n\r\n                  <DropZone {...getRootProps()}>\r\n                    <input {...getInputProps()} />\r\n                    <FlexBox alignItems=\"center\" flexDirection=\"column\">\r\n                      <Icon sx={{ color: 'text.secondary', fontSize: '48px' }}>publish</Icon>\r\n                      {imageList.length ? (\r\n                        <span>{imageList.length} images were selected</span>\r\n                      ) : (\r\n                        <span>Drop project images</span>\r\n                      )}\r\n                    </FlexBox>\r\n                  </DropZone>\r\n                </Grid>\r\n\r\n                <Grid item sm={6} xs={12}>\r\n                  <StyledTextField\r\n                    select\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    name=\"category\"\r\n                    label=\"Category *\"\r\n                    variant=\"outlined\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.category || ''}\r\n                    error={Boolean(touched.category && errors.category)}\r\n                    helperText={touched.category && errors.category}\r\n                  >\r\n                    {categoryList.sort().map((cat) => (\r\n                      <MenuItem value={cat} key={cat}>\r\n                        {cat}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </StyledTextField>\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    name=\"client\"\r\n                    label=\"Client\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                    value={values.client || ''}\r\n                    // onBlur={handleBlur}\r\n                    // error={Boolean(touched.client && errors.client)}\r\n                    // helperText={touched.client && errors.client}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    name=\"client_region\"\r\n                    size=\"small\"\r\n                    // type=\"number\"\r\n                    label=\"Client Region\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                    value={values.client_region || ''}\r\n                    // onBlur={handleBlur}\r\n                    // error={Boolean(touched.client_region && errors.client_region)}\r\n                    // helperText={touched.client_region && errors.client_region}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"email\"\r\n                    name=\"client_email\"\r\n                    label=\"Client Email\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                    value={values.client_email || ''}\r\n                    onBlur={handleBlur}\r\n                    error={Boolean(touched.client_email && errors.client_email)}\r\n                    helperText={touched.client_email && errors.client_email}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"number\"\r\n                    name=\"client_phone\"\r\n                    label=\"Client Phone\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                    value={values.client_phone || ''}\r\n                    // onBlur={handleBlur}\r\n                    // error={Boolean(touched.client_phone && errors.client_phone)}\r\n                    // helperText={touched.client_phone && errors.client_phone}\r\n                  />\r\n\r\n                  <StyledTextField\r\n                    fullWidth\r\n                    rows={5}\r\n                    multiline\r\n                    size=\"small\"\r\n                    name=\"description\"\r\n                    variant=\"outlined\"\r\n                    label=\"Description *\"\r\n                    value={values.description || ''}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={Boolean(touched.description && errors.description)}\r\n                    helperText={touched.description && errors.description}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Divider sx={{ mb: 2 }} />\r\n              <Stack direction=\"row\" className=\"mb-3\" spacing={2} justifyContent=\"flex-end\">\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={() => props.back()}>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  justifyContent=\"flex-end\"\r\n                  sx={{ mb: 2, px: 6 }}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Stack>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst statusList = ['active', 'inactive'];\r\nconst categoryList = [\r\n  'Dashboard',\r\n  'E-commerce',\r\n  'Blogs',\r\n  'Portfolios',\r\n  'Business',\r\n  'Educational',\r\n  'Personal',\r\n  'Non-profit and Charity',\r\n  'Government',\r\n  'Travel and Tourism',\r\n  'Real Estate',\r\n  'Technology',\r\n  'Health and Wellness',\r\n  'News and Information',\r\n  'Media and Entertainment',\r\n  'Social Networking'\r\n];\r\nexport default ProjectForm;\r\n"],"names":["Container","styled","_ref","theme","margin","breakpoints","down","marginBottom","StyledTextField","TextField","Form","paddingLeft","paddingRight","DropZone","FlexAlignCenter","_ref2","isDragActive","height","width","cursor","borderRadius","transition","border","concat","convertHexToRGB","palette","text","primary","background","statusList","categoryList","props","imageList","setImageList","useState","dateRange","setDateRange","loading","setLoading","getRootProps","getInputProps","acceptedFiles","useDropzone","accept","showAlert","useAlert","storage","getStorage","formData","updateData","productSchema","yup","shape","name","required","technology","category","status","description","initialValues","live_url","client","client_region","client_email","client_phone","images","project_duration","created_at","getIsoDate","updated_at","useEffect","addProject","async","downloadURLs","Promise","all","map","storageRef","ref","file","uploadBytes","downloadURL","getDownloadURL","push","preparedData","values","addDoc","collection","fireStore","fetchData","back","error","console","updateProject","length","projectRef","doc","id","updateDoc","_jsxs","children","_jsx","MatxLoading","Card","elevation","Box","p","display","H4","action","Divider","sx","mb","Formik","onSubmit","validationSchema","_ref3","errors","touched","resetForm","handleChange","handleBlur","handleSubmit","Grid","container","spacing","item","sm","xs","fullWidth","label","size","variant","onBlur","onChange","value","Boolean","helperText","Flatpickr","options","mode","className","placeholder","selectedDates","_selectedDates$","_selectedDates$2","startDate","toISOString","endDate","select","sort","cat","MenuItem","rows","multiline","FlexBox","alignItems","flexDirection","Icon","color","fontSize","type","Stack","direction","justifyContent","Button","onClick","px"],"sourceRoot":""}