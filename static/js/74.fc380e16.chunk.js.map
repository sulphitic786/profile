{"version":3,"file":"static/js/74.fc380e16.chunk.js","mappings":"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","sources":["app/views/material-kit/auto-complete/AsyncAutocomplete.jsx","app/views/material-kit/auto-complete/AutocompleteCombo.jsx","app/views/material-kit/auto-complete/BadgeAutocomplete.jsx","app/views/material-kit/auto-complete/AppAutoComplete.jsx"],"sourcesContent":["import { useState, useEffect, Fragment } from 'react';\r\nimport { Autocomplete, CircularProgress, styled, TextField } from '@mui/material';\r\nimport axios from 'axios';\r\n\r\nconst AutoComplete = styled(Autocomplete)(() => ({ width: 300 }));\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => setTimeout(resolve, delay));\r\n}\r\n\r\nexport default function AsyncAutocomplete() {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) return;\r\n\r\n    (async () => {\r\n      // *https://www.registers.service.gov.uk/registers/country/use-the-api*\r\n      const response = await axios.get(\r\n        'https://country.register.gov.uk/records.json?page-size=5000'\r\n      );\r\n      await sleep(3000); // For demo purposes.\r\n      const countries = await response.json();\r\n\r\n      if (active) {\r\n        setOptions(Object.keys(countries).map((key) => countries[key].item[0]));\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    if (!open) setOptions([]);\r\n  }, [open]);\r\n\r\n  return (\r\n    <AutoComplete\r\n      open={open}\r\n      options={options}\r\n      loading={loading}\r\n      id=\"asynchronous-demo\"\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      getOptionLabel={(option) => option.name}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"Asynchronous\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </Fragment>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import { Autocomplete, styled, TextField } from '@mui/material';\r\nimport { createFilterOptions } from '@mui/material/Autocomplete';\r\nimport React, { Fragment } from 'react';\r\n\r\nconst AutoComplete = styled(Autocomplete)(() => ({\r\n  width: 300,\r\n  marginBottom: '16px',\r\n}));\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst AutocompleteCombo = () => {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    if (newValue && newValue.inputValue) {\r\n      setValue({ label: newValue.inputValue });\r\n      return;\r\n    }\r\n    setValue(newValue);\r\n  };\r\n\r\n  const filterOptions = (options, params) => {\r\n    const filtered = filter(options, params);\r\n    if (params.inputValue !== '') {\r\n      filtered.push({ inputValue: params.inputValue, label: `Add \"${params.inputValue}\"` });\r\n    }\r\n    return filtered;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <AutoComplete\r\n        options={suggestions}\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Combo box\" variant=\"outlined\" fullWidth />\r\n        )}\r\n      />\r\n\r\n      <AutoComplete\r\n        value={value}\r\n        options={suggestions}\r\n        onChange={handleChange}\r\n        filterOptions={filterOptions}\r\n        getOptionLabel={(option) => {\r\n          // e.g value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          return option.label;\r\n        }}\r\n        renderOption={(option) => option.label}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Free solo with text demo\" variant=\"outlined\" fullWidth />\r\n        )}\r\n      />\r\n\r\n      <AutoComplete\r\n        options={suggestions}\r\n        getOptionLabel={(option) => option.label}\r\n        getOptionDisabled={(option) => option === suggestions[0] || option === suggestions[2]}\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Disabled option\" variant=\"outlined\" fullWidth />\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AutocompleteCombo;\r\n","import { Autocomplete, Chip, TextField } from '@mui/material';\r\nimport { Box, useTheme } from '@mui/material';\r\n\r\nconst BadgeAutocomplete = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: 500,\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(3)\r\n        }\r\n      }}\r\n    >\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-standard\"\r\n        options={top100Films}\r\n        getOptionLabel={(option) => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"standard\"\r\n            label=\"Multiple values\"\r\n            placeholder=\"Favorites\"\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-outlined\"\r\n        options={top100Films}\r\n        getOptionLabel={(option) => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        filterSelectedOptions\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            label=\"filterSelectedOptions\"\r\n            placeholder=\"Favorites\"\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-filled\"\r\n        options={top100Films.map((option) => option.title)}\r\n        defaultValue={[top100Films[13].title]}\r\n        freeSolo\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"filled\"\r\n            label=\"freeSolo\"\r\n            placeholder=\"Favorites\"\r\n            fullWidth\r\n          />\r\n        )}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BadgeAutocomplete;\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 }\r\n];\r\n","import { Box, styled } from '@mui/material';\r\nimport { Breadcrumb, SimpleCard } from 'app/components';\r\nimport AsyncAutocomplete from './AsyncAutocomplete';\r\nimport AutocompleteCombo from './AutocompleteCombo';\r\nimport BadgeAutocomplete from './BadgeAutocomplete';\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n  [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n  '& .breadcrumb': {\r\n    marginBottom: '30px',\r\n    [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n  },\r\n}));\r\n\r\nconst AppAutoComplete = () => {\r\n  return (\r\n    <Container>\r\n      <Box className=\"breadcrumb\">\r\n        <Breadcrumb\r\n          routeSegments={[{ name: 'Material', path: '/material' }, { name: 'Autocomplete' }]}\r\n        />\r\n      </Box>\r\n\r\n      <SimpleCard title=\"autocomplete combo\">\r\n        <AutocompleteCombo />\r\n      </SimpleCard>\r\n\r\n      <Box py=\"12px\" />\r\n\r\n      <SimpleCard title=\"Asyncronous Autocomplete\">\r\n        <AsyncAutocomplete />\r\n      </SimpleCard>\r\n\r\n      <Box py=\"12px\" />\r\n\r\n      <SimpleCard title=\"Asyncronous Autocomplete\">\r\n        <BadgeAutocomplete />\r\n      </SimpleCard>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AppAutoComplete;\r\n"],"names":["AutoComplete","styled","Autocomplete","width","AsyncAutocomplete","open","setOpen","useState","options","setOptions","loading","length","useEffect","active","response","axios","get","delay","arguments","undefined","Promise","resolve","setTimeout","sleep","countries","json","Object","keys","map","key","item","_jsx","id","onOpen","onClose","getOptionLabel","option","name","renderInput","params","TextField","fullWidth","variant","label","InputProps","endAdornment","_jsxs","Fragment","children","CircularProgress","color","size","marginBottom","suggestions","filter","createFilterOptions","AutocompleteCombo","value","setValue","React","onChange","handleChange","_","newValue","inputValue","filterOptions","filtered","push","concat","renderOption","style","freeSolo","getOptionDisabled","BadgeAutocomplete","theme","useTheme","Box","sx","marginTop","spacing","multiple","top100Films","title","defaultValue","placeholder","filterSelectedOptions","renderTags","getTagProps","index","Chip","year","Container","_ref","margin","breakpoints","down","AppAutoComplete","className","Breadcrumb","routeSegments","path","SimpleCard","py"],"sourceRoot":""}