{"version":3,"file":"static/js/6694.8e2951bd.chunk.js","mappings":"gNAOA,MAiGA,EAtD6BA,KAC3B,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KA/CMC,MAgDdH,GAhDcG,EAgDG,EA/CnBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADC,OAAUH,GACZI,QAAQ,QAADD,OAAUH,QA6CG,GACnB,IAcH,MAAO,MAAM,ECgCf,EArDsBK,KACpB,MAAM,QAAEhB,IAAYC,EAAAA,EAAAA,MAEbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KA/CMC,MAgDdH,GAhDcG,EAgDG,EA/CnBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADC,OAAUH,GACZI,QAAQ,QAADD,OAAUH,QA6CG,GACnB,IAYH,MAAO,MAAM,EC7DTM,EAAW,SAACX,GAAK,IAAEY,EAAMC,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAC,OACjCZ,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADC,OAAUH,EAAIO,GAChBH,QAAQ,QAADD,OAAUH,EAAIO,MACnB,EAyJN,EAlGmBG,KACjB,MAAOC,EAAOC,IAAYnB,EAAAA,EAAAA,UAAS,KAC5BoB,EAAUC,IAAerB,EAAAA,EAAAA,UAAS,KACnC,QAAEJ,IAAYC,EAAAA,EAAAA,MAEpBI,EAAAA,EAAAA,YAAU,KACRkB,EAASN,EAAS,KAClBQ,EAAYR,EAAS,EAAG,IAAI,GAC3B,IA+BH,MAAO,MAAM,E,aClGf,MAAMS,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,EAAcC,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CAC9CE,OAAQ,OACR,CAACD,EAAME,YAAYC,KAAK,OAAQ,CAAEF,OAAQ,QAC1C,gBAAiB,CACfA,OAAQ,OACR,CAACD,EAAME,YAAYC,KAAK,OAAQ,CAAEF,OAAQ,SAE7C,IA8BD,EA5BuBG,KAEnBC,EAAAA,EAAAA,MAACR,EAAS,CAAAS,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,UAAU,aAAYH,UACzBC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACTC,cAAe,CAAC,CAAEC,KAAM,SAAUC,KAAM,kBAAoB,CAAED,KAAM,uBAIxEL,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,4BAA2BT,UAC3CC,EAAAA,EAAAA,KAACpB,EAAa,OAGhBoB,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACQ,GAAI,CAAEC,GAAI,WAEfV,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,uCAAsCT,UACtDC,EAAAA,EAAAA,KAACrC,EAAoB,OAGvBqC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACQ,GAAI,CAAEC,GAAI,WAEfV,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAM,gCAA+BT,UAC/CC,EAAAA,EAAAA,KAACf,EAAU,Q","sources":["app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"sourcesContent":["import { useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"../../components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"../../utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\n// import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  display: \"flex\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  overflow: \"auto\"\r\n});\r\n\r\nconst SimpleHorizontalList = () => {\r\n  const { palette } = useTheme();\r\n  const [item, setItem] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setItem(getItems(6));\r\n  }, []);\r\n\r\n  const onDragEnd = (result) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const tempItems = reorder(item, result.source.index, result.destination.index);\r\n    setItem(tempItems);\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  return \"drrg\";\r\n  // <DragDropContext onDragEnd={onDragEnd}>\r\n  //   <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n  //     {(provided, snapshot) => (\r\n  //       <div\r\n  //         ref={provided.innerRef}\r\n  //         style={getListStyle(snapshot.isDraggingOver, palette)}\r\n  //         {...provided.droppableProps}\r\n  //       >\r\n  //         {item.map((item, index) => (\r\n  //           <Draggable key={item.id} draggableId={item.id} index={index}>\r\n  //             {(provided, snapshot) => (\r\n  //               <div\r\n  //                 ref={provided.innerRef}\r\n  //                 {...provided.draggableProps}\r\n  //                 {...provided.dragHandleProps}\r\n  //                 style={getItemStyle(\r\n  //                   snapshot.isDragging,\r\n  //                   provided.draggableProps.style,\r\n  //                   palette\r\n  //                 )}\r\n  //               >\r\n  //                 {item.content}\r\n  //               </div>\r\n  //             )}\r\n  //           </Draggable>\r\n  //         ))}\r\n  //         {provided.placeholder}\r\n  //       </div>\r\n  //     )}\r\n  //   </Droppable>\r\n  // </DragDropContext>\r\n};\r\n\r\nexport default SimpleHorizontalList;\r\n","import { useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"../../components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"../../utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\n// import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nconst SimpleListDnD = () => {\r\n  const { palette } = useTheme();\r\n\r\n  const [item, setItem] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setItem(getItems(6));\r\n  }, []);\r\n\r\n  const onDragEnd = (result) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const tempItems = reorder(item, result.source.index, result.destination.index);\r\n    setItem(tempItems);\r\n  };\r\n\r\n  return \"dddd\";\r\n  // <DragDropContext onDragEnd={onDragEnd}>\r\n  //   <Droppable droppableId=\"droppable\">\r\n  //     {(provided, snapshot) => (\r\n  //       <div\r\n  //         {...provided.droppableProps}\r\n  //         ref={provided.innerRef}\r\n  //         style={getListStyle(snapshot.isDraggingOver, palette)}\r\n  //       >\r\n  //         {item.map((item, index) => (\r\n  //           <Draggable key={item.id} draggableId={item.id} index={index}>\r\n  //             {(provided, snapshot) => (\r\n  //               <div\r\n  //                 ref={provided.innerRef}\r\n  //                 {...provided.draggableProps}\r\n  //                 {...provided.dragHandleProps}\r\n  //                 style={getItemStyle(\r\n  //                   snapshot.isDragging,\r\n  //                   provided.draggableProps.style,\r\n  //                   palette\r\n  //                 )}\r\n  //               >\r\n  //                 {item.content}\r\n  //               </div>\r\n  //             )}\r\n  //           </Draggable>\r\n  //         ))}\r\n  //         {provided.placeholder}\r\n  //       </div>\r\n  //     )}\r\n  //   </Droppable>\r\n  // </DragDropContext>\r\n};\r\n\r\nexport default SimpleListDnD;\r\n","import { Box, useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"../../components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"../../utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\n// import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nconst TwoListDnD = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [selected, setSelected] = useState([]);\r\n  const { palette } = useTheme();\r\n\r\n  useEffect(() => {\r\n    setItems(getItems(10));\r\n    setSelected(getItems(5, 10));\r\n  }, []);\r\n\r\n  const getList = (id) => (id === \"droppable\" ? items : selected);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\r\n\r\n      if (source.droppableId === \"droppable2\") {\r\n        setSelected(items);\r\n      } else setItems(items);\r\n    } else {\r\n      const result = move(\r\n        getList(source.droppableId),\r\n        getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      setItems(result.droppable);\r\n      setSelected(result.droppable2);\r\n    }\r\n  };\r\n\r\n  return \"jjjj\";\r\n  // <DragDropContext onDragEnd={onDragEnd}>\r\n  //   <Box display=\"flex\" justifyContent=\"space-around\">\r\n  //     <Droppable droppableId=\"droppable\">\r\n  //       {(provided, snapshot) => (\r\n  //         <div ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver, palette)}>\r\n  //           {items.map((item, index) => (\r\n  //             <Draggable key={item.id} draggableId={item.id} index={index}>\r\n  //               {(provided, snapshot) => (\r\n  //                 <div\r\n  //                   ref={provided.innerRef}\r\n  //                   {...provided.draggableProps}\r\n  //                   {...provided.dragHandleProps}\r\n  //                   style={getItemStyle(\r\n  //                     snapshot.isDragging,\r\n  //                     provided.draggableProps.style,\r\n  //                     palette\r\n  //                   )}\r\n  //                 >\r\n  //                   {item.content}\r\n  //                 </div>\r\n  //               )}\r\n  //             </Draggable>\r\n  //           ))}\r\n  //           {provided.placeholder}\r\n  //         </div>\r\n  //       )}\r\n  //     </Droppable>\r\n\r\n  //     <Droppable droppableId=\"droppable2\">\r\n  //       {(provided, snapshot) => (\r\n  //         <div ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver, palette)}>\r\n  //           {selected.map((item, index) => (\r\n  //             <Draggable key={item.id} draggableId={item.id} index={index}>\r\n  //               {(provided, snapshot) => (\r\n  //                 <div\r\n  //                   ref={provided.innerRef}\r\n  //                   {...provided.draggableProps}\r\n  //                   {...provided.dragHandleProps}\r\n  //                   style={getItemStyle(\r\n  //                     snapshot.isDragging,\r\n  //                     provided.draggableProps.style,\r\n  //                     palette\r\n  //                   )}\r\n  //                 >\r\n  //                   {item.content}\r\n  //                 </div>\r\n  //               )}\r\n  //             </Draggable>\r\n  //           ))}\r\n\r\n  //           {provided.placeholder}\r\n  //         </div>\r\n  //       )}\r\n  //     </Droppable>\r\n  //   </Box>\r\n  // </DragDropContext>\r\n};\r\n\r\nexport default TwoListDnD;\r\n","import { Box, styled } from \"@mui/material\";\nimport Breadcrumb from \"../../components/Breadcrumb\";\nimport SimpleCard from \"../../components/SimpleCard\";\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\nimport SimpleListDnD from \"./SimpleListDnD\";\nimport TwoListDnD from \"./TwoListDnD\";\n\nconst Container = styled(\"div\")(({ theme }) => ({\n  margin: \"30px\",\n  [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n  \"& .breadcrumb\": {\n    margin: \"30px\",\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" }\n  }\n}));\n\nconst AppDragAndDrop = () => {\n  return (\n    <Container>\n      <Box className=\"breadcrumb\">\n        <Breadcrumb\n          routeSegments={[{ name: \"others\", path: \"/drag-and-drop\" }, { name: \"Drag and Drop\" }]}\n        />\n      </Box>\n\n      <SimpleCard title=\"Simple List Drag and Drop\">\n        <SimpleListDnD />\n      </SimpleCard>\n\n      <Box sx={{ py: \"12px\" }} />\n\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n        <SimpleHorizontalList />\n      </SimpleCard>\n\n      <Box sx={{ py: \"12px\" }} />\n\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\n        <TwoListDnD />\n      </SimpleCard>\n    </Container>\n  );\n};\n\nexport default AppDragAndDrop;\n"],"names":["SimpleHorizontalList","palette","useTheme","item","setItem","useState","useEffect","count","Array","from","length","v","k","map","id","concat","content","SimpleListDnD","getItems","offset","arguments","undefined","TwoListDnD","items","setItems","selected","setSelected","Container","styled","_ref","theme","margin","breakpoints","down","AppDragAndDrop","_jsxs","children","_jsx","Box","className","Breadcrumb","routeSegments","name","path","SimpleCard","title","sx","py"],"sourceRoot":""}