{"version":3,"file":"static/js/2726.295093b7.chunk.js","mappings":"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","sources":["app/contexts/ToastNotification.js","app/views/sessions/JwtLogin.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport { amber, green } from '@mui/material/colors';\r\nimport { styled } from '@mui/material';\r\n\r\nconst ContentRoot = styled('div')(({ theme }) => ({\r\n  '& .icon': { fontSize: 20 },\r\n  '& .success': { backgroundColor: green[600] },\r\n  '& .warning': { backgroundColor: amber[700] },\r\n  '& .error': { backgroundColor: theme.palette.error.main },\r\n  '& .info': { backgroundColor: theme.palette.primary.main },\r\n  '& .iconVariant': { opacity: 0.9, marginRight: theme.spacing(1) },\r\n  '& .message': { display: 'flex', alignItems: 'center' },\r\n  '& .margin': { margin: theme.spacing(1) }\r\n}));\r\n\r\nconst ToastNotification = ({ message, type }) => {\r\n  const [open, setOpen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setOpen(false);\r\n    }, 6000); // Auto-hide after 6000 milliseconds\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [type]);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const getAlertSeverity = (type) => {\r\n    console.log(\"typeee\", type)\r\n    switch (type) {\r\n      case 'success':\r\n        return 'success';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'error':\r\n        return 'error';\r\n      default:\r\n        return 'info';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContentRoot>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        {console.log(\"open\", open, message, type)}\r\n        <Alert onClose={handleClose} severity={getAlertSeverity(type)} sx={{ width: '100%' }} variant=\"filled\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </ContentRoot>\r\n  );\r\n};\r\n\r\nexport const toastNotification = (message, type) => {\r\n  console.log(\"message, type\", message, type)\r\n  return <ToastNotification message={message} type={type} />;\r\n};\r\n\r\n\r\n\r\n\r\n// const ContentRoot = styled('div')(({ theme }) => ({\r\n//   '& .icon': { fontSize: 20 },\r\n//   '& .success': { backgroundColor: green[600] },\r\n//   '& .warning': { backgroundColor: amber[700] },\r\n//   '& .error': { backgroundColor: theme.palette.error.main },\r\n//   '& .info': { backgroundColor: theme.palette.primary.main },\r\n//   '& .iconVariant': { opacity: 0.9, marginRight: theme.spacing(1) },\r\n//   '& .message': { display: 'flex', alignItems: 'center' },\r\n//   '& .margin': { margin: theme.spacing(1) }\r\n// }));\r\n\r\n// export default function CustomizedSnackbars() {\r\n//   const [open, setOpen] = React.useState(false);\r\n\r\n//   function handleClick() {\r\n//     setOpen(true);\r\n//   }\r\n//   function handleClose(_, reason) {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n//     setOpen(false);\r\n//   }\r\n\r\n//   return (\r\n//     <ContentRoot>\r\n//       <Button variant=\"outlined\" className=\"margin\" onClick={handleClick}>\r\n//         Open success snackbar\r\n//       </Button>\r\n\r\n//       <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n//         <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }} variant=\"filled\">\r\n//           This is a success message!\r\n//         </Alert>\r\n//       </Snackbar>\r\n\r\n//       <Alert onClose={handleClose} sx={{ m: 1 }} severity=\"error\" variant=\"filled\">\r\n//         This is an error message!\r\n//       </Alert>\r\n\r\n//       <Alert onClose={handleClose} sx={{ m: 1 }} severity=\"warning\" variant=\"filled\">\r\n//         This is a warning message!\r\n//       </Alert>\r\n\r\n//       <Alert onClose={handleClose} sx={{ m: 1 }} severity=\"info\" variant=\"filled\">\r\n//         This is an information message!\r\n//       </Alert>\r\n\r\n//       <Alert onClose={handleClose} sx={{ m: 1 }} severity=\"success\" variant=\"filled\">\r\n//         This is a success message!\r\n//       </Alert>\r\n//     </ContentRoot>\r\n//   );\r\n// }\r\n","import { LoadingButton } from '@mui/lab';\r\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\r\nimport { Box, styled, useTheme } from '@mui/material';\r\nimport { Paragraph } from 'app/components/Typography';\r\nimport useAuth from 'app/hooks/useAuth';\r\nimport { Formik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { toastNotification } from 'app/contexts/ToastNotification';\r\nimport * as Yup from 'yup';\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\r\n\r\nconst ContentBox = styled(Box)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  position: 'relative',\r\n  background: 'rgba(0, 0, 0, 0.01)'\r\n}));\r\n\r\nconst JWTRoot = styled(JustifyBox)(() => ({\r\n  background: '#1A2038',\r\n  minHeight: '100% !important',\r\n  '& .card': {\r\n    maxWidth: 800,\r\n    minHeight: 400,\r\n    margin: '1rem',\r\n    display: 'flex',\r\n    borderRadius: 12,\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\n// inital login credentials\r\n// const initialValues = {\r\n//   email: 'jason@ui-lib.com',\r\n//   password: 'dummyPass',\r\n//   remember: true\r\n// };\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  remember: true\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, 'Password must be 6 character length')\r\n    .required('Password is required!'),\r\n  email: Yup.string().email('Invalid Email address').required('Email is required!')\r\n});\r\n\r\nconst JwtLogin = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { login } = useAuth();\r\n\r\n  // const handleFormSubmit = async (values) => {\r\n  //   console.log('called login:');\r\n  //   setLoading(true);\r\n  //   try {\r\n  //     await login(values.email, values.password);\r\n  //     navigate('/');\r\n  //   } catch (e) {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  const handleFormSubmit = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      // Use Firebase signInWithEmail function\r\n      await login(values.email, values.password);\r\n      console.log('values', values);\r\n      toastNotification('API call successful!', 'success');\r\n      navigate('/dashboard/default');\r\n    } catch (e) {\r\n      setLoading(false);\r\n      navigate('/');\r\n      toastNotification('API call failed!', 'error');\r\n      // Handle any authentication errors\r\n      console.error('Firebase authentication error:', e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <JWTRoot>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item sm={6} xs={12}>\r\n            <JustifyBox p={4} height=\"100%\" sx={{ minWidth: 320 }}>\r\n              <img src=\"/assets/images/illustrations/dreamer.svg\" width=\"100%\" alt=\"\" />\r\n            </JustifyBox>\r\n          </Grid>\r\n\r\n          <Grid item sm={6} xs={12}>\r\n            <ContentBox>\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n              >\r\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 1.5 }}\r\n                    />\r\n\r\n                    <FlexBox justifyContent=\"space-between\">\r\n                      <FlexBox gap={1}>\r\n                        <Checkbox\r\n                          size=\"small\"\r\n                          name=\"remember\"\r\n                          onChange={handleChange}\r\n                          checked={values.remember}\r\n                          sx={{ padding: 0 }}\r\n                        />\r\n\r\n                        <Paragraph>Remember Me</Paragraph>\r\n                      </FlexBox>\r\n\r\n                      <NavLink\r\n                        to=\"/session/forgot-password\"\r\n                        style={{ color: theme.palette.primary.main }}\r\n                      >\r\n                        Forgot password?\r\n                      </NavLink>\r\n                    </FlexBox>\r\n\r\n                    <LoadingButton\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ my: 2 }}\r\n                    >\r\n                      Login\r\n                    </LoadingButton>\r\n\r\n                    <Paragraph>\r\n                      Don't have an account?\r\n                      <NavLink\r\n                        to=\"/session/signup\"\r\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\r\n                      >\r\n                        Register\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </ContentBox>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </JWTRoot>\r\n  );\r\n};\r\n\r\nexport default JwtLogin;\r\n"],"names":["ContentRoot","styled","_ref","theme","fontSize","backgroundColor","green","amber","palette","error","main","primary","opacity","marginRight","spacing","display","alignItems","margin","ToastNotification","_ref2","message","type","open","setOpen","useState","useEffect","timer","setTimeout","clearTimeout","handleClose","event","reason","_jsx","children","_jsxs","Snackbar","autoHideDuration","onClose","console","log","Alert","severity","getAlertSeverity","sx","width","variant","toastNotification","FlexBox","Box","JustifyBox","justifyContent","ContentBox","height","padding","position","background","JWTRoot","minHeight","maxWidth","borderRadius","initialValues","email","password","remember","validationSchema","Yup","shape","min","required","JwtLogin","useTheme","navigate","useNavigate","loading","setLoading","login","useAuth","Card","className","Grid","container","item","sm","xs","p","minWidth","src","alt","Formik","onSubmit","async","values","e","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","name","label","onBlur","value","onChange","helperText","Boolean","mb","gap","Checkbox","checked","Paragraph","NavLink","to","style","color","LoadingButton","my","marginLeft"],"sourceRoot":""}