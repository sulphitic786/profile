{"version":3,"file":"static/js/9303.19e8ddae.chunk.js","mappings":"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","sources":["app/hooks/useUsers.js","app/views/pages/user-list/UserList1.jsx","app/views/pages/user-list/styles.js","../node_modules/@mui/icons-material/esm/Twitter.js"],"sourcesContent":["// import { getUsers } from \"app/redux/slices/userSlice\";\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n\n// const useUsers = () => {\n//   const dispatch = useDispatch();\n//   const { error, users, loading } = useSelector((state) => state.users);\n\n//   useEffect(() => {\n//     dispatch(getUsers());\n//   }, [dispatch]);\n\n//   return {\n//     users,\n//     isError: error,\n//     isLoading: loading,\n//   };\n// };\n\n// export default useUsers;\n\n\n\nimport { useState, useEffect } from \"react\";\n\nconst useUsers = () => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\"https://api.example.com/users\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch users\");\n        }\n        const data = await response.json();\n        setUsers(data);\n        setLoading(false);\n        setError(null);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n        setUsers([]);\n        setLoading(false);\n        setError(\"Failed to fetch users\");\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  return {\n    users,\n    isLoading: loading,\n    isError: error,\n  };\n};\n\nexport default useUsers;\n","import { Twitter } from \"@mui/icons-material\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  styled,\r\n} from \"@mui/material\";\r\nimport { Breadcrumb, FacebookIcon, GoogleIcon } from \"app/components\";\r\nimport { FlexBetween, FlexBox } from \"app/components/FlexBox\";\r\nimport { H5 } from \"app/components/Typography\";\r\nimport useUsers from \"app/hooks/useUsers\";\r\nimport { Container, StyledButton, StyledP } from \"./styles\";\r\n\r\n// styled components\r\nconst StyledIonButton = styled(IconButton)({\r\n  padding: \"8px\",\r\n  \"&:hover\": { color: \"#ffffff\" },\r\n  \"& svg\": { fontSize: \"14px\" },\r\n});\r\n\r\nconst GoogleButton = styled(StyledIonButton)({\r\n  padding: \"8px\",\r\n  color: \"#ec412c\",\r\n  borderColor: \"#ec412c\",\r\n  backgroundColor: \"rgba(236,65,44,.1)\",\r\n  \"&:hover\": { background: `#ec412c`, color: \"#ffffff\" },\r\n});\r\n\r\nconst FacebookButton = styled(StyledIonButton)({\r\n  padding: \"8px\",\r\n  color: \"#3765c9\",\r\n  borderColor: \"#3765c9\",\r\n  backgroundColor: \"rgba(55,101,201,.1)\",\r\n  \"&:hover\": { background: `#3765c9`, color: \"#ffffff\" },\r\n});\r\n\r\nconst TwitterButton = styled(StyledIonButton)({\r\n  padding: \"8px\",\r\n  color: \"#039ff5\",\r\n  borderColor: \"#039ff5\",\r\n  backgroundColor: \"rgba(3,159,245,.1)\",\r\n  \"&:hover\": { background: `#039ff5`, color: \"#ffffff\" },\r\n});\r\n\r\nconst ContentBox = styled(FlexBetween)({\r\n  padding: \"20px\",\r\n  margin: \"-8px\",\r\n  flexWrap: \"wrap\",\r\n});\r\n\r\nconst UserList1 = () => {\r\n  const { users } = useUsers();\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"breadcrumb\">\r\n        <Breadcrumb routeSegments={[{ name: \"Pages\", path: \"/pages\" }, { name: \"User List 1\" }]} />\r\n      </div>\r\n\r\n      <Grid container spacing={3}>\r\n        {users.map((user) => (\r\n          <Grid key={user.id} item sm={6} xs={12}>\r\n            <Card>\r\n              <FlexBetween p=\"20px\" m={-1} flexWrap=\"wrap\">\r\n                <FlexBox alignItems=\"center\" m={1}>\r\n                  <Avatar src={user.imgUrl} sx={{ width: 48, height: 48 }} />\r\n\r\n                  <Box ml={2}>\r\n                    <H5>{user.name}</H5>\r\n                    <StyledP sx={{ mt: 1, fontWeight: \"normal\", textTransform: \"capitalize\" }}>\r\n                      {user.company?.toLowerCase()}\r\n                    </StyledP>\r\n                  </Box>\r\n                </FlexBox>\r\n\r\n                <FlexBox m={1}>\r\n                  <GoogleButton>\r\n                    <GoogleIcon />\r\n                  </GoogleButton>\r\n\r\n                  <FacebookButton sx={{ mx: \"4px\" }}>\r\n                    <FacebookIcon />\r\n                  </FacebookButton>\r\n\r\n                  <TwitterButton>\r\n                    <Twitter />\r\n                  </TwitterButton>\r\n                </FlexBox>\r\n              </FlexBetween>\r\n\r\n              <Divider />\r\n\r\n              <ContentBox>\r\n                <Box m={1} mr={3} maxWidth={220} flexGrow={1}>\r\n                  <FlexBetween mb={1}>\r\n                    <StyledP sx={{ fontWeight: \"500\" }}>Progressbar</StyledP>\r\n                    <StyledP>40%</StyledP>\r\n                  </FlexBetween>\r\n\r\n                  <LinearProgress color=\"primary\" value={35} variant=\"determinate\" />\r\n                </Box>\r\n\r\n                <Box m={1} display=\"flex\">\r\n                  <StyledButton size=\"small\" sx={{ mr: \"4px\" }}>\r\n                    CHAT\r\n                  </StyledButton>\r\n\r\n                  <StyledButton size=\"small\">PROFILE</StyledButton>\r\n                </Box>\r\n              </ContentBox>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserList1;\r\n","import { Button, styled } from \"@mui/material\";\nimport { Paragraph } from \"app/components/Typography\";\nimport { convertHexToRGB } from \"app/utils/utils\";\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  paddingLeft: \"20px\",\n  paddingRight: \"20px\",\n  transition: \"all 250ms\",\n  color: theme.palette.primary.main,\n  background: `rgba(${convertHexToRGB(theme.palette.primary.main)}, 0.15)`,\n  \"&:hover\": {\n    color: \"#ffffff\",\n    fallbacks: [{ color: \"white !important\" }],\n    background: `${theme.palette.primary.main} !important`,\n    backgroundColor: `${theme.palette.primary.main} !important`,\n  },\n}));\n\nconst Container = styled(\"div\")(({ theme }) => ({\n  margin: \"30px\",\n  [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n  \"& .breadcrumb\": {\n    marginBottom: \"30px\",\n    [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\n  },\n}));\n\nconst StyledP = styled(Paragraph)(({ theme }) => ({\n  color: theme.palette.text.secondary,\n}));\n\nexport { StyledButton, Container, StyledP };\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z\"\n}), 'Twitter');"],"names":["useUsers","users","setUsers","useState","loading","setLoading","error","setError","useEffect","async","response","fetch","ok","Error","data","json","console","fetchUsers","isLoading","isError","StyledIonButton","styled","IconButton","padding","color","fontSize","GoogleButton","borderColor","backgroundColor","background","FacebookButton","TwitterButton","ContentBox","FlexBetween","margin","flexWrap","UserList1","_jsxs","Container","children","_jsx","className","Breadcrumb","routeSegments","name","path","Grid","container","spacing","map","user","_user$company","item","sm","xs","Card","p","m","FlexBox","alignItems","Avatar","src","imgUrl","sx","width","height","Box","ml","H5","StyledP","mt","fontWeight","textTransform","company","toLowerCase","GoogleIcon","mx","FacebookIcon","Twitter","Divider","mr","maxWidth","flexGrow","mb","LinearProgress","value","variant","display","StyledButton","size","id","Button","_ref","theme","paddingLeft","paddingRight","transition","palette","primary","main","concat","convertHexToRGB","fallbacks","_ref2","breakpoints","down","marginBottom","Paragraph","_ref3","text","secondary","createSvgIcon","d"],"sourceRoot":""}