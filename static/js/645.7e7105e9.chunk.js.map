{"version":3,"file":"static/js/645.7e7105e9.chunk.js","mappings":"2SAOA,MAiBMA,EAAeA,CAACC,EAAYC,EAAgBC,KAAO,CAEvDC,WAAY,OACZC,QAASC,GACTC,OAAO,KAADC,OANK,EAMM,UACjBC,UAAWC,EAAAA,EAAa,GACxBC,aAAc,MAEdC,WAAsB,QAAAJ,OAAVP,GACAY,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,UACnCD,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWG,OADQ,UAIpDb,IAGCc,EAAeA,CAACC,EAAgBd,KAAO,CAC3CQ,aAAc,MACdO,QAAS,OACTN,WAAYK,EACR,kBAAiB,QAAAT,QACTK,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,SAAQ,OACvDT,QAxBW,EAyBXc,SAAU,SA0DZ,EAvD6BC,KAC3B,MAAM,QAAEjB,IAAYkB,EAAAA,EAAAA,MACbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KA/CMC,MAgDdH,GAhDcG,EAgDG,EA/CnBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADzB,OAAUuB,GACZG,QAAQ,QAAD1B,OAAUuB,QA6CG,GACnB,IAcH,OACEI,EAAAA,EAAAA,KAACC,EAAAA,GAAe,CAACC,UAbAC,IAEjB,IAAKA,EAAOC,YACV,OAGF,MAAMC,EAlDMC,EAACC,EAAMC,EAAYC,KACjC,MAAMN,EAASX,MAAMC,KAAKc,IACnBG,GAAWP,EAAOQ,OAAOH,EAAY,GAG5C,OAFAL,EAAOQ,OAAOF,EAAU,EAAGC,GAEpBP,CAAM,EA6COG,CAAQnB,EAAMgB,EAAOS,OAAOC,MAAOV,EAAOC,YAAYS,OACxEzB,EAAQiB,EAAU,EAMoBS,UACpCd,EAAAA,EAAAA,KAACe,EAAAA,GAAS,CAACC,YAAY,YAAYC,UAAU,aAAYH,SACtDA,CAACI,EAAUC,KACVC,EAAAA,EAAAA,MAAA,OACEC,IAAKH,EAASI,SACdC,MAAO1C,EAAasC,EAASrC,eAAgBd,MACzCkD,EAASM,eAAcV,SAAA,CAE1B3B,EAAKU,KAAI,CAACV,EAAM0B,KACfb,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CAAeC,YAAavC,EAAKW,GAAIe,MAAOA,EAAMC,SACzDA,CAACI,EAAUC,KACVnB,EAAAA,EAAAA,KAAA,OACEqB,IAAKH,EAASI,YACVJ,EAASS,kBACTT,EAASU,gBACbL,MAAO1D,EACLsD,EAASrD,WACToD,EAASS,eAAeJ,MACxBvD,GACA8C,SAED3B,EAAKY,WAZIZ,EAAKW,MAiBtBoB,EAASW,kBAIA,EC7EhBhE,EAAeA,CAACC,EAAYC,EAAgBC,KAAO,CAEvDC,WAAY,OACZC,QAASC,GACTC,OAAO,OAADC,OANK,EAMQ,QACnBC,UAAWC,EAAAA,EAAa,GACxBC,aAAc,MAEdC,WAAsB,QAAAJ,OAAVP,GACAY,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,UACnCD,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWG,OADQ,UAIpDb,IAGCc,EAAeA,CAACC,EAAgBd,KAAO,CAC3CQ,aAAc,MACdC,WAAYK,EACR,kBAAiB,QAAAT,QACTK,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,SAAQ,OACvDT,QAvBW,EAwBX4D,MAAO,MAyDT,EAtDsBC,KACpB,MAAM,QAAE/D,IAAYkB,EAAAA,EAAAA,MAEbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KA/CMC,MAgDdH,GAhDcG,EAgDG,EA/CnBC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADzB,OAAUuB,GACZG,QAAQ,QAAD1B,OAAUuB,QA6CG,GACnB,IAYH,OACEI,EAAAA,EAAAA,KAACC,EAAAA,GAAe,CAACC,UAXAC,IAEjB,IAAKA,EAAOC,YACV,OAGF,MAAMC,EAlDMC,EAACC,EAAMC,EAAYC,KACjC,MAAMN,EAASX,MAAMC,KAAKc,IACnBG,GAAWP,EAAOQ,OAAOH,EAAY,GAG5C,OAFAL,EAAOQ,OAAOF,EAAU,EAAGC,GAEpBP,CAAM,EA6COG,CAAQnB,EAAMgB,EAAOS,OAAOC,MAAOV,EAAOC,YAAYS,OACxEzB,EAAQiB,EAAU,EAIoBS,UACpCd,EAAAA,EAAAA,KAACe,EAAAA,GAAS,CAACC,YAAY,YAAWF,SAC/BA,CAACI,EAAUC,KACVC,EAAAA,EAAAA,MAAA,UACMF,EAASM,eACbH,IAAKH,EAASI,SACdC,MAAO1C,EAAasC,EAASrC,eAAgBd,GAAS8C,SAAA,CAErD3B,EAAKU,KAAI,CAACV,EAAM0B,KACfb,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CAAeC,YAAavC,EAAKW,GAAIe,MAAOA,EAAMC,SACzDA,CAACI,EAAUC,KACVnB,EAAAA,EAAAA,KAAA,OACEqB,IAAKH,EAASI,YACVJ,EAASS,kBACTT,EAASU,gBACbL,MAAO1D,EACLsD,EAASrD,WACToD,EAASS,eAAeJ,MACxBvD,GACA8C,SAED3B,EAAKY,WAZIZ,EAAKW,MAiBtBoB,EAASW,kBAIA,EC5FhBG,EAAW,SAACzC,GAAK,IAAE0C,EAAMC,UAAAxC,OAAA,QAAAyC,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAC,OACjC1C,MAAMC,KAAK,CAAEC,OAAQH,IAAS,CAACI,EAAGC,IAAMA,IAAGC,KAAKD,IAAC,CAC/CE,GAAG,QAADzB,OAAUuB,EAAIqC,GAChBlC,QAAQ,QAAD1B,OAAUuB,EAAIqC,MACnB,EA8BApE,EAAeA,CAACC,EAAYC,EAAgBC,KAAO,CAEvDC,WAAY,OACZC,QAASC,GACTC,OAAO,OAADC,OANK,EAMQ,QACnBC,UAAWC,EAAAA,EAAa,GACxBC,aAAc,MAEdC,WAAsB,QAAAJ,OAAVP,GACAY,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,UACnCD,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWG,OADQ,UAIpDb,IAGCc,EAAeA,CAACC,EAAgBd,KAAO,CAC3CQ,aAAc,MACdC,WAAYK,EACR,kBAAiB,QAAAT,QACTK,EAAAA,EAAAA,IAAgBV,EAAQS,WAAWE,SAAQ,OACvDT,QAvBW,EAwBX4D,MAAO,MAsGT,EAnGmBM,KACjB,MAAOC,EAAOC,IAAYjD,EAAAA,EAAAA,UAAS,KAC5BkD,EAAUC,IAAenD,EAAAA,EAAAA,UAAS,KACnC,QAAErB,IAAYkB,EAAAA,EAAAA,MAEpBI,EAAAA,EAAAA,YAAU,KACRgD,EAASN,EAAS,KAClBQ,EAAYR,EAAS,EAAG,IAAI,GAC3B,IAEH,MAAMS,EAAW3C,GAAe,cAAPA,EAAqBuC,EAAQE,EA6BtD,OACEvC,EAAAA,EAAAA,KAACC,EAAAA,GAAe,CAACC,UA5BAC,IACjB,MAAM,OAAES,EAAM,YAAER,GAAgBD,EAGhC,GAAKC,EAIL,GAAIQ,EAAOI,cAAgBZ,EAAYY,YAAa,CAClD,MAAMqB,EAzEI/B,EAACC,EAAMC,EAAYC,KACjC,MAAMN,EAASX,MAAMC,KAAKc,IACnBG,GAAWP,EAAOQ,OAAOH,EAAY,GAG5C,OAFAL,EAAOQ,OAAOF,EAAU,EAAGC,GAEpBP,CAAM,EAoEKG,CAAQmC,EAAQ7B,EAAOI,aAAcJ,EAAOC,MAAOT,EAAYS,OAElD,eAAvBD,EAAOI,YACTwB,EAAYH,GACPC,EAASD,EAClB,KAAO,CACL,MAAMlC,EApECuC,EAAC9B,EAAQR,EAAauC,EAAiBC,KAClD,MAAMC,EAAcrD,MAAMC,KAAKmB,GACzBkC,EAAYtD,MAAMC,KAAKW,IACtBM,GAAWmC,EAAYlC,OAAOgC,EAAgB9B,MAAO,GAE5DiC,EAAUnC,OAAOiC,EAAqB/B,MAAO,EAAGH,GAEhD,MAAMP,EAAS,CAAC,EAIhB,OAHAA,EAAOwC,EAAgB3B,aAAe6B,EACtC1C,EAAOyC,EAAqB5B,aAAe8B,EAEpC3C,CAAM,EAyDMuC,CACbD,EAAQ7B,EAAOI,aACfyB,EAAQrC,EAAYY,aACpBJ,EACAR,GAGFkC,EAASnC,EAAO4C,WAChBP,EAAYrC,EAAO6C,WACrB,GAIsClC,UACpCM,EAAAA,EAAAA,MAAC6B,EAAAA,EAAG,CAAClE,QAAQ,OAAOmE,eAAe,eAAcpC,SAAA,EAC/Cd,EAAAA,EAAAA,KAACe,EAAAA,GAAS,CAACC,YAAY,YAAWF,SAC/BA,CAACI,EAAUC,KACVC,EAAAA,EAAAA,MAAA,OAAKC,IAAKH,EAASI,SAAUC,MAAO1C,EAAasC,EAASrC,eAAgBd,GAAS8C,SAAA,CAChFuB,EAAMxC,KAAI,CAACV,EAAM0B,KAChBb,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CAAeC,YAAavC,EAAKW,GAAIe,MAAOA,EAAMC,SACzDA,CAACI,EAAUC,KACVnB,EAAAA,EAAAA,KAAA,OACEqB,IAAKH,EAASI,YACVJ,EAASS,kBACTT,EAASU,gBACbL,MAAO1D,EACLsD,EAASrD,WACToD,EAASS,eAAeJ,MACxBvD,GACA8C,SAED3B,EAAKY,WAZIZ,EAAKW,MAiBtBoB,EAASW,kBAKhB7B,EAAAA,EAAAA,KAACe,EAAAA,GAAS,CAACC,YAAY,aAAYF,SAChCA,CAACI,EAAUC,KACVC,EAAAA,EAAAA,MAAA,OAAKC,IAAKH,EAASI,SAAUC,MAAO1C,EAAasC,EAASrC,eAAgBd,GAAS8C,SAAA,CAChFyB,EAAS1C,KAAI,CAACV,EAAM0B,KACnBb,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CAAeC,YAAavC,EAAKW,GAAIe,MAAOA,EAAMC,SACzDA,CAACI,EAAUC,KACVnB,EAAAA,EAAAA,KAAA,OACEqB,IAAKH,EAASI,YACVJ,EAASS,kBACTT,EAASU,gBACbL,MAAO1D,EACLsD,EAASrD,WACToD,EAASS,eAAeJ,MACxBvD,GACA8C,SAED3B,EAAKY,WAZIZ,EAAKW,MAkBtBoB,EAASW,qBAKF,EC1JhBsB,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,EAAcC,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CAC9CjF,OAAQ,OACR,CAACkF,EAAMC,YAAYC,KAAK,OAAQ,CAAEpF,OAAQ,QAC1C,gBAAiB,CACfA,OAAQ,OACR,CAACkF,EAAMC,YAAYC,KAAK,OAAQ,CAAEpF,OAAQ,SAE7C,IA8BD,EA5BuBqF,KAEnBrC,EAAAA,EAAAA,MAAC+B,EAAS,CAAArC,SAAA,EACRd,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAACS,UAAU,aAAY5C,UACzBd,EAAAA,EAAAA,KAAC2D,EAAAA,EAAU,CACTC,cAAe,CAAC,CAAEC,KAAM,SAAUC,KAAM,kBAAoB,CAAED,KAAM,uBAIxE7D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CAACC,MAAM,4BAA2BlD,UAC3Cd,EAAAA,EAAAA,KAAC+B,EAAa,OAGhB/B,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAACgB,GAAI,CAAEC,GAAI,WAEflE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CAACC,MAAM,uCAAsClD,UACtDd,EAAAA,EAAAA,KAACf,EAAoB,OAGvBe,EAAAA,EAAAA,KAACiD,EAAAA,EAAG,CAACgB,GAAI,CAAEC,GAAI,WAEflE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAU,CAACC,MAAM,gCAA+BlD,UAC/Cd,EAAAA,EAAAA,KAACoC,EAAU,Q","sources":["app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"sourcesContent":["import { useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"app/components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"app/utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`,\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  display: \"flex\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  overflow: \"auto\",\r\n});\r\n\r\nconst SimpleHorizontalList = () => {\r\n  const { palette } = useTheme();\r\n  const [item, setItem] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setItem(getItems(6));\r\n  }, []);\r\n\r\n  const onDragEnd = (result) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const tempItems = reorder(item, result.source.index, result.destination.index);\r\n    setItem(tempItems);\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n        {(provided, snapshot) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            style={getListStyle(snapshot.isDraggingOver, palette)}\r\n            {...provided.droppableProps}\r\n          >\r\n            {item.map((item, index) => (\r\n              <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    style={getItemStyle(\r\n                      snapshot.isDragging,\r\n                      provided.draggableProps.style,\r\n                      palette\r\n                    )}\r\n                  >\r\n                    {item.content}\r\n                  </div>\r\n                )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default SimpleHorizontalList;\r\n","import { useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"app/components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"app/utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`,\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  width: 250,\r\n});\r\n\r\nconst SimpleListDnD = () => {\r\n  const { palette } = useTheme();\r\n\r\n  const [item, setItem] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setItem(getItems(6));\r\n  }, []);\r\n\r\n  const onDragEnd = (result) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const tempItems = reorder(item, result.source.index, result.destination.index);\r\n    setItem(tempItems);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            style={getListStyle(snapshot.isDraggingOver, palette)}\r\n          >\r\n            {item.map((item, index) => (\r\n              <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    style={getItemStyle(\r\n                      snapshot.isDragging,\r\n                      provided.draggableProps.style,\r\n                      palette\r\n                    )}\r\n                  >\r\n                    {item.content}\r\n                  </div>\r\n                )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default SimpleListDnD;\r\n","import { Box, useTheme } from \"@mui/material\";\r\nimport { themeShadows } from \"app/components/MatxTheme/themeColors\";\r\nimport { convertHexToRGB } from \"app/utils/utils\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`,\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: themeShadows[4],\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging\r\n    ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n    : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver\r\n    ? \"rgba(0,0,0, .1)\"\r\n    : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n  padding: grid,\r\n  width: 250,\r\n});\r\n\r\nconst TwoListDnD = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [selected, setSelected] = useState([]);\r\n  const { palette } = useTheme();\r\n\r\n  useEffect(() => {\r\n    setItems(getItems(10));\r\n    setSelected(getItems(5, 10));\r\n  }, []);\r\n\r\n  const getList = (id) => (id === \"droppable\" ? items : selected);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\r\n\r\n      if (source.droppableId === \"droppable2\") {\r\n        setSelected(items);\r\n      } else setItems(items);\r\n    } else {\r\n      const result = move(\r\n        getList(source.droppableId),\r\n        getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      setItems(result.droppable);\r\n      setSelected(result.droppable2);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Box display=\"flex\" justifyContent=\"space-around\">\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver, palette)}>\r\n              {items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style,\r\n                        palette\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n\r\n        <Droppable droppableId=\"droppable2\">\r\n          {(provided, snapshot) => (\r\n            <div ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver, palette)}>\r\n              {selected.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style,\r\n                        palette\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </Box>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default TwoListDnD;\r\n","import { Box, styled } from \"@mui/material\";\nimport Breadcrumb from \"app/components/Breadcrumb\";\nimport SimpleCard from \"app/components/SimpleCard\";\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\nimport SimpleListDnD from \"./SimpleListDnD\";\nimport TwoListDnD from \"./TwoListDnD\";\n\nconst Container = styled(\"div\")(({ theme }) => ({\n  margin: \"30px\",\n  [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n  \"& .breadcrumb\": {\n    margin: \"30px\",\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n  },\n}));\n\nconst AppDragAndDrop = () => {\n  return (\n    <Container>\n      <Box className=\"breadcrumb\">\n        <Breadcrumb\n          routeSegments={[{ name: \"others\", path: \"/drag-and-drop\" }, { name: \"Drag and Drop\" }]}\n        />\n      </Box>\n\n      <SimpleCard title=\"Simple List Drag and Drop\">\n        <SimpleListDnD />\n      </SimpleCard>\n\n      <Box sx={{ py: \"12px\" }} />\n\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n        <SimpleHorizontalList />\n      </SimpleCard>\n\n      <Box sx={{ py: \"12px\" }} />\n\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\n        <TwoListDnD />\n      </SimpleCard>\n    </Container>\n  );\n};\n\nexport default AppDragAndDrop;\n"],"names":["getItemStyle","isDragging","draggableStyle","palette","userSelect","padding","grid","margin","concat","boxShadow","themeShadows","borderRadius","background","convertHexToRGB","default","paper","getListStyle","isDraggingOver","display","overflow","SimpleHorizontalList","useTheme","item","setItem","useState","useEffect","count","Array","from","length","v","k","map","id","content","_jsx","DragDropContext","onDragEnd","result","destination","tempItems","reorder","list","startIndex","endIndex","removed","splice","source","index","children","Droppable","droppableId","direction","provided","snapshot","_jsxs","ref","innerRef","style","droppableProps","Draggable","draggableId","draggableProps","dragHandleProps","placeholder","width","SimpleListDnD","getItems","offset","arguments","undefined","TwoListDnD","items","setItems","selected","setSelected","getList","move","droppableSource","droppableDestination","sourceClone","destClone","droppable","droppable2","Box","justifyContent","Container","styled","_ref","theme","breakpoints","down","AppDragAndDrop","className","Breadcrumb","routeSegments","name","path","SimpleCard","title","sx","py"],"sourceRoot":""}