{"version":3,"file":"static/js/8266.39e7ea88.chunk.js","mappings":"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","sources":["app/hooks/useAuth.js","app/views/sessions/JwtRegister.jsx"],"sourcesContent":["// import AuthContext from \"app/contexts/JWTAuthContext\";\r\nimport AuthContext from \"app/contexts/FirebaseAuthContext\";\r\n// import AuthContext from \"app/contexts/Auth0Context\";\r\nimport { useContext } from \"react\";\r\n\r\nconst useAuth = () => useContext(AuthContext);\r\n\r\nexport default useAuth;\r\n","import { useTheme } from '@emotion/react';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\r\nimport { Box, styled } from '@mui/material';\r\nimport { Paragraph } from 'app/components/Typography';\r\nimport useAuth from 'app/hooks/useAuth';\r\nimport { Formik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { useAlert } from 'app/contexts/AlertContext';\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  background: 'rgba(0, 0, 0, 0.01)'\r\n}));\r\n\r\nconst JWTRegister = styled(JustifyBox)(() => ({\r\n  background: '#1A2038',\r\n  minHeight: '100vh !important',\r\n  '& .card': {\r\n    maxWidth: 800,\r\n    minHeight: 400,\r\n    margin: '1rem',\r\n    display: 'flex',\r\n    borderRadius: 12,\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  username: '',\r\n  remember: true\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, 'Password must be 6 character length')\r\n    .required('Password is required!'),\r\n  email: Yup.string().email('Invalid Email address').required('Email is required!')\r\n});\r\n\r\nconst JwtRegister = () => {\r\n  const theme = useTheme();\r\n  const { register } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const { showAlert } = useAlert();\r\n\r\n  const handleFormSubmit = async (values) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      await register(values.email, values.password);\r\n      navigate('/');\r\n      showAlert('success', 'User registered successfully.');\r\n      console.log('User is Created Successfully');\r\n    } catch (e) {\r\n      showAlert('error', 'Unable to create the user.');\r\n      console.log(e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <JWTRegister>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item sm={6} xs={12}>\r\n            <ContentBox>\r\n              <img\r\n                width=\"100%\"\r\n                alt=\"Register\"\r\n                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n              />\r\n            </ContentBox>\r\n          </Grid>\r\n\r\n          <Grid item sm={6} xs={12}>\r\n            <Box p={4} height=\"100%\">\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n              >\r\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      label=\"Username\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.username}\r\n                      onChange={handleChange}\r\n                      helperText={touched.username && errors.username}\r\n                      error={Boolean(errors.username && touched.username)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n\r\n                    <FlexBox gap={1} alignItems=\"center\">\r\n                      <Checkbox\r\n                        size=\"small\"\r\n                        name=\"remember\"\r\n                        onChange={handleChange}\r\n                        checked={values.remember}\r\n                        sx={{ padding: 0 }}\r\n                      />\r\n\r\n                      <Paragraph fontSize={13}>\r\n                        I have read and agree to the terms of service.\r\n                      </Paragraph>\r\n                    </FlexBox>\r\n\r\n                    <LoadingButton\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ mb: 2, mt: 3 }}\r\n                    >\r\n                      Regiser\r\n                    </LoadingButton>\r\n\r\n                    <Paragraph>\r\n                      Already have an account?\r\n                      <NavLink\r\n                        to=\"/session/signin\"\r\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\r\n                      >\r\n                        Login\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </JWTRegister>\r\n  );\r\n};\r\n\r\nexport default JwtRegister;\r\n"],"names":["useAuth","useContext","AuthContext","FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","theme","useTheme","register","navigate","useNavigate","loading","setLoading","useState","showAlert","useAlert","_jsx","children","Card","className","_jsxs","Grid","container","item","sm","xs","width","alt","src","p","Formik","onSubmit","async","values","console","log","e","_ref","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","gap","Checkbox","checked","Paragraph","fontSize","LoadingButton","color","mt","NavLink","to","style","palette","primary","main","marginLeft"],"sourceRoot":""}